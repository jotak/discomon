apiVersion: v1
kind: Template
metadata:
  name: prometheus-grafana-discovery
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    generation: 1
    labels:
      app: prometheus
    name: prometheus
  spec:
    replicas: 1
    selector:
      app: prometheus
      deploymentconfig: prometheus
    template:
      metadata:
        labels:
          app: prometheus
          deploymentconfig: prometheus
      spec:
        volumes:
          - name: prometheus-volume-1
            emptyDir: {}
          - name: prom-config-volume
            configMap:
              name: prom-config
              defaultMode: 420
        containers:
        - image: >-
            prom/prometheus@sha256:4f6d3a525f030e598016be765283c6455c3c830997a5c916b27a5d727be718e1
          imagePullPolicy: Always
          name: prometheus
          ports:
          - containerPort: 9090
            protocol: TCP
          resources: {}
          volumeMounts:
          - name: prometheus-volume-1
            mountPath: /prometheus
          - name: prom-config-volume
            mountPath: /etc/prometheus/
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: prometheus
    name: prometheus
  spec:
    ports:
    - name: 9090-tcp
      port: 9090
      protocol: TCP
      targetPort: 9090
    selector:
      deploymentconfig: prometheus
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    name: prometheus
  spec:
    to:
      kind: Service
      name: prometheus
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    generation: 1
    labels:
      app: grafana
    name: grafana
  spec:
    replicas: 1
    selector:
      app: grafana
      deploymentconfig: grafana
    template:
      metadata:
        labels:
          app: grafana
          deploymentconfig: grafana
      spec:
        containers:
        - image: hawkular/hawkular-grafana-datasource:1.0.10
          imagePullPolicy: Always
          name: grafana
          ports:
          - containerPort: 3000
            protocol: TCP
          resources: {}
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: grafana
    name: grafana
  spec:
    ports:
    - name: 3000-tcp
      port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      deploymentconfig: grafana
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    name: grafana
  spec:
    to:
      kind: Service
      name: grafana
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: prom-config
  data:
    prometheus.yml: |
      global:
          scrape_interval: 10s
          scrape_timeout: 10s
      scrape_configs:
        - job_name: k8s-pods
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          kubernetes_sd_configs:
            - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
